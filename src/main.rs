use clap::Parser;
use std::{io::prelude::*, time::Instant};

#[derive(Parser, Debug)]
#[command(author, version, about, long_about = None)]
struct Args {
    /// Number of times to greet
    #[arg(short, long, default_value_t = 1)]
    count: u8,

    /// Demonstrate output with each byte
    #[arg(long, default_value_t = false)]
    example: bool,
}

// https://de.wikipedia.org/wiki/Codepage_437
const CODE_PAGE_437: [&str; 256] = [
    "␀", "☺", "☻", "♥", "♦", "♣", "♠", "•", "◘", "○", "◙", "♂", "♀", "♪", "♫", "☼", // 00-0f
    "►", "◄", "↕", "‼", "¶", "§", "▬", "↨", "↑", "↓", "→", "←", "∟", "↔", "▲", "▼", // 10-1f
    " ", "!", "\"", "#", "$", "%", "&", "'", "(", ")", "*", "+", ",", "-", ".", "/", // 20-2f
    "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", ":", ";", "<", "=", ">", "?", // 30-3f
    "@", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", // 40-4f
    "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "[", "\\", "]", "^", "_", // 50-5f
    "`", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", // 60-6f
    "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "{", "|", "}", "~", "⌂", // 70-7f
    "Ç", "ü", "é", "â", "ä", "à", "å", "ç", "ê", "ë", "è", "ï", "î", "ì", "Ä", "Å", // 80-8f
    "É", "æ", "Æ", "ô", "ö", "ò", "û", "ù", "ÿ", "Ö", "Ü", "¢", "£", "¥", "₧", "ƒ", // 90-9f
    "á", "í", "ó", "ú", "ñ", "Ñ", "ª", "º", "¿", "⌐", "¬", "½", "¼", "¡", "«", "»", // a0-af
    "░", "▒", "▓", "│", "┤", "╡", "╢", "╖", "╕", "╣", "║", "╗", "╝", "╜", "╛", "┐", // b0-bf
    "└", "┴", "┬", "├", "─", "┼", "╞", "╟", "╚", "╔", "╩", "╦", "╠", "═", "╬", "╧", // c0-cf
    "╨", "╤", "╥", "╙", "╘", "╒", "╓", "╫", "╪", "┘", "┌", "█", "▄", "▌", "▐", "▀", // d0-df
    "α", "ß", "Γ", "π", "Σ", "σ", "µ", "τ", "Φ", "Θ", "Ω", "δ", "∞", "φ", "ε", "∩", // e0-ef
    "≡", "±", "≥", "≤", "⌠", "⌡", "÷", "≈", "°", "∙", "·", "√", "ⁿ", "²", "■", " ", // f0-ff
];

#[rustfmt::skip]
const HEX: [&str; 256] = [
    "00", "01", "02", "03", "04", "05", "06", "07",  "08", "09", "0a", "0b", "0c", "0d", "0e", "0f", // 00-0f
    "10", "11", "12", "13", "14", "15", "16", "17",  "18", "19", "1a", "1b", "1c", "1d", "1e", "1f", // 00-0f
    "20", "21", "22", "23", "24", "25", "26", "27",  "28", "29", "2a", "2b", "2c", "2d", "2e", "2f", // 00-0f
    "30", "31", "32", "33", "34", "35", "36", "37",  "38", "39", "3a", "3b", "3c", "3d", "3e", "3f", // 00-0f
    "40", "41", "42", "43", "44", "45", "46", "47",  "48", "49", "4a", "4b", "4c", "4d", "4e", "4f", // 00-0f
    "50", "51", "52", "53", "54", "55", "56", "57",  "58", "59", "5a", "5b", "5c", "5d", "5e", "5f", // 00-0f
    "60", "61", "62", "63", "64", "65", "66", "67",  "68", "69", "6a", "6b", "6c", "6d", "6e", "6f", // 00-0f
    "70", "71", "72", "73", "74", "75", "76", "77",  "78", "79", "7a", "7b", "7c", "7d", "7e", "7f", // 00-0f
    "80", "81", "82", "83", "84", "85", "86", "87",  "88", "89", "8a", "8b", "8c", "8d", "8e", "8f", // 00-0f
    "90", "91", "92", "93", "94", "95", "96", "97",  "98", "99", "9a", "9b", "9c", "9d", "9e", "9f", // 00-0f
    "a0", "a1", "a2", "a3", "a4", "a5", "a6", "a7",  "a8", "a9", "aa", "ab", "ac", "ad", "ae", "af", // 00-0f
    "b0", "b1", "b2", "b3", "b4", "b5", "b6", "b7",  "b8", "b9", "ba", "bb", "bc", "bd", "be", "bf", // 00-0f
    "c0", "c1", "c2", "c3", "c4", "c5", "c6", "c7",  "c8", "c9", "ca", "cb", "cc", "cd", "ce", "cf", // 00-0f
    "d0", "d1", "d2", "d3", "d4", "d5", "d6", "d7",  "d8", "d9", "da", "db", "dc", "dd", "de", "df", // 00-0f
    "e0", "e1", "e2", "e3", "e4", "e5", "e6", "e7",  "e8", "e9", "ea", "eb", "ec", "ed", "ee", "ef", // 00-0f
    "f0", "f1", "f2", "f3", "f4", "f5", "f6", "f7",  "f8", "f9", "fa", "fb", "fc", "fd", "fe", "ff", // 00-0f
];

// default format: 32 bytes per line
// 001428d0: f30f 1efa 5548 89e5  4156 4154 5348 81ec  8800 0000 4c8b 364c  8b67 0864 488b 0425  ....UH..AVATSH......L.6L.g.dH..%
fn dump<R: std::io::Read>(mut reader: R) -> std::io::Result<()> {
    // first, create a hex lookup table
    let mut buffer = [0u8; 4096];
    let mut writer = std::io::BufWriter::new(std::io::stdout());

    loop {
        let bytes_read = reader.read(&mut buffer)?;
        if bytes_read == 0 {
            break;
        }

        for byte in &buffer[..bytes_read] {
            // let str = CODE_PAGE_437[*byte as usize].to_string();
            // let bytes = str.as_bytes();
            let bytes = CODE_PAGE_437[*byte as usize].as_bytes();
            writer.write_all(&bytes).unwrap();
        }
    }

    Ok(())
}

fn main() {
    let args = Args::parse();

    let stdin = std::io::stdin();
    let start = Instant::now();
    let _ = dump(stdin.lock());
    let end = Instant::now();
    eprintln!("\n{:?} sec", end.duration_since(start));
}
